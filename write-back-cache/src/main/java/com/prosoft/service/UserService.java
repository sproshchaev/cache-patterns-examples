package com.prosoft.service;

import com.prosoft.model.User;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Service
@Slf4j
public class UserService {

    // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    private final Map<Long, User> database = new HashMap<>();

    // Write-Back Cache - –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞ –≤ –∫—ç—à, –ø–æ—Ç–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –ë–î
    private final Map<Long, User> cache = new ConcurrentHashMap<>();

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    private final ScheduledExecutorService writeBackExecutor = Executors.newScheduledThreadPool(2);

    @PostConstruct
    public void init() {
        // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        database.put(1L, new User(1L, "Alice", "alice@example.com", false));
        database.put(2L, new User(2L, "Bob", "bob@example.com", false));
        database.put(3L, new User(3L, "Charlie", "charlie@example.com", false));

        log.info("üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", database.size());

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è Write-Back
        startWriteBackProcess();
    }

    /**
     * CACHE-ASIDE PATTERN –¥–ª—è —á—Ç–µ–Ω–∏—è
     */
    public User getUserById(Long id) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", id);

        // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        User cachedUser = cache.get(id);
        if (cachedUser != null) {
            log.info("üéØ CACHE HIT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ!");
            return cachedUser;
        }

        // –®–ê–ì 2: –ö—ç—à-–ø—Ä–æ–º–∞—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        log.info("‚ùå CACHE MISS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã...");
        User userFromDatabase = database.get(id);

        if (userFromDatabase == null) {
            log.warn("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! ID: {}", id);
            return null;
        }

        // –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        log.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à...");
        cache.put(id, userFromDatabase);
        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ!");

        return userFromDatabase;
    }

    /**
     * WRITE-BACK PATTERN - –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –≤ –∫—ç—à, –ø–æ—Ç–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –ë–î
     */
    public User createUser(User user) {
        log.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Write-Back: {}", user.getName());

        // WRITE-BACK: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –∫—ç—à
        if (user.getId() == null) {
            long maxId = database.keySet().stream().mapToLong(Long::longValue).max().orElse(0L);
            user.setId(maxId + 1);
        }

        user.setDirty(true); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–≥—Ä—è–∑–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ

        log.info("„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à (–ø–æ–º–µ—á–µ–Ω –∫–∞–∫ dirty)");
        cache.put(user.getId(), user);

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ —Ñ–æ–Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        log.info("‚è≠Ô∏è  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞");

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –∫—ç—à–µ (–æ–∂–∏–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î): {} ({})", user.getName(), user.getId());
        return user;
    }

    /**
     * WRITE-BACK PATTERN - –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –∫—ç—à–µ, –ø–æ—Ç–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –ë–î
     */
    public User updateUser(Long id, String name, String email) {
        log.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —á–µ—Ä–µ–∑ Write-Back", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
        User user = cache.get(id);
        if (user == null) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
            user = database.get(id);
            if (user == null) {
                log.warn("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! ID: {}", id);
                return null;
            }
            cache.put(id, user);
        }

        // WRITE-BACK: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫—ç—à–µ
        log.info("WRITE-BACK: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ");
        user.setName(name);
        user.setEmail(email);
        user.setDirty(true); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–≥—Ä—è–∑–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ

        cache.put(id, user);

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ
        log.info("‚è≠Ô∏è  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ");

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫—ç—à–µ (–æ–∂–∏–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î): {} ({})", user.getName(), user.getId());
        return user;
    }

    /**
     * WRITE-BACK PATTERN - —É–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫—ç—à–∞, –ø–æ—Ç–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –ë–î
     */
    public void deleteUser(Long id) {
        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —á–µ—Ä–µ–∑ Write-Back", id);

        // WRITE-BACK: —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        User user = cache.get(id);
        if (user != null) {
            user.setDirty(true); // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            cache.put(id, user); // –ü–æ–∫–∞ —Ö—Ä–∞–Ω–∏–º –≤ –∫—ç—à–µ –∫–∞–∫ "–≥—Ä—è–∑–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        }

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
        log.info("‚è≠Ô∏è  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ");

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î: {}", id);
    }

    /**
     * –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å Write-Back - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç "–≥—Ä—è–∑–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
     */
    private void startWriteBackProcess() {
        writeBackExecutor.scheduleAtFixedRate(() -> {
            try {
                processDirtyData();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ Write-Back: ", e);
            }
        }, 5, 5, TimeUnit.SECONDS); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        log.info("üöÄ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å Write-Back (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ "–≥—Ä—è–∑–Ω—ã—Ö" –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø–∏—Å—å –≤ –ë–î
     */
    private void processDirtyData() {
        log.debug("üîÅ Write-Back –ø—Ä–æ—Ü–µ—Å—Å: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dirty –¥–∞–Ω–Ω—ã—Ö...");

        cache.entrySet().stream()
                .filter(entry -> entry.getValue().isDirty())
                .forEach(entry -> {
                    Long userId = entry.getKey();
                    User user = entry.getValue();

                    try {
                        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î
                        CompletableFuture.runAsync(() -> {
                            log.info("üíæ WRITE-BACK: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ –ë–î", userId);
                            database.put(userId, new User(user.getId(), user.getName(), user.getEmail(), false));
                            user.setDirty(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ dirty
                            log.info("‚úÖ WRITE-BACK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î", userId);
                        });
                    } catch (Exception e) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ –ë–î: ", userId, e);
                    }
                });
    }

    public void clearCache() {
        log.info("üßπ –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à! –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {}", cache.size());
        cache.clear();
        log.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω");
    }

    public Map<Long, User> getCache() {
        log.info("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç—É. –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {}", cache.size());
        return new HashMap<>(cache);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    public Map<Long, User> getDatabase() {
        log.info("üóÑÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –†–∞–∑–º–µ—Ä –ë–î: {}", database.size());
        return new HashMap<>(database);
    }
}