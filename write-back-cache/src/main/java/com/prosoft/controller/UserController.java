package com.prosoft.controller;

import com.prosoft.model.User;
import com.prosoft.service.UserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/users")
@Slf4j
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/{id}")
    public User getUser(@PathVariable Long id) {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω HTTP GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", id);

        User user = userService.getUserById(id);

        if (user != null) {
            log.info("üèÅ –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} ({})", user.getName(), user.getId());
        } else {
            log.warn("üèÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
        }

        return user;
    }

    @PostMapping
    public User createUser(@RequestBody User user) {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω HTTP POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getName());

        User createdUser = userService.createUser(user);

        log.info("üèÅ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—ç—à–µ: {} ({})", createdUser.getName(), createdUser.getId());
        return createdUser;
    }

    @PutMapping("/{id}")
    public User updateUser(@PathVariable Long id,
                           @RequestParam String name,
                           @RequestParam String email) {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω HTTP PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", id);

        User user = userService.updateUser(id, name, email);

        if (user != null) {
            log.info("üèÅ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—ç—à–µ: {} ({})", user.getName(), user.getId());
        } else {
            log.warn("üèÅ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {}", id);
        }

        return user;
    }

    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω HTTP DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", id);
        userService.deleteUser(id);
        log.info("üèÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id);
    }

    @PostMapping("/cache/clear")
    public String clearCache() {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞");
        userService.clearCache();
        String response = "–ö—ç—à –æ—á–∏—â–µ–Ω!";
        log.info("üèÅ {}", response);
        return response;
    }

    @GetMapping("/cache/show")
    public Map<Long, User> showCache() {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫—ç—à–∞");
        Map<Long, User> cacheContent = userService.getCache();
        log.info("üèÅ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞", cacheContent.size());
        return cacheContent;
    }

    @GetMapping("/database/show")
    public Map<Long, User> showDatabase() {
        log.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
        Map<Long, User> dbContent = userService.getDatabase();
        log.info("üèÅ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î", dbContent.size());
        return dbContent;
    }
}