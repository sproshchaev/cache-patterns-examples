package com.prosoft.service;

import com.prosoft.model.User;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class UserService {

    // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    private final Map<Long, User> database = new HashMap<>();

    // –ö—ç—à –¥–ª—è —á—Ç–µ–Ω–∏—è
    private final Map<Long, User> cache = new ConcurrentHashMap<>();

    @PostConstruct
    public void init() {
        // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        database.put(1L, new User(1L, "Alice", "alice@example.com"));
        database.put(2L, new User(2L, "Bob", "bob@example.com"));
        database.put(3L, new User(3L, "Charlie", "charlie@example.com"));

        log.info("üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", database.size());
    }

    /**
     * CACHE-ASIDE PATTERN –¥–ª—è —á—Ç–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ)
     */
    public User getUserById(Long id) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", id);

        // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        User cachedUser = cache.get(id);
        if (cachedUser != null) {
            log.info("üéØ CACHE HIT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ!");
            return cachedUser;
        }

        // –®–ê–ì 2: –ö—ç—à-–ø—Ä–æ–º–∞—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        log.info("‚ùå CACHE MISS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã...");
        User userFromDatabase = database.get(id);

        if (userFromDatabase == null) {
            log.warn("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! ID: {}", id);
            return null;
        }

        // –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        log.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à...");
        cache.put(id, userFromDatabase);
        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ!");

        return userFromDatabase;
    }

    /**
     * WRITE-AROUND PATTERN - –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –ë–î, –º–∏–Ω—É—è –∫—ç—à
     */
    public User createUser(User user) {
        log.info("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Write-Around: {}", user.getName());

        // WRITE-AROUND: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –≤ –ë–î, –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à
        if (user.getId() == null) {
            long maxId = database.keySet().stream().mapToLong(Long::longValue).max().orElse(0L);
            user.setId(maxId + 1);
        }

        log.info("üíæ WRITE-AROUND: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à –ø—Ä–æ–ø—É—â–µ–Ω)");
        database.put(user.getId(), user);

        // –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —á—Ç–µ–Ω–∏–∏
        log.info("‚è≠Ô∏è  –ö—ç—à –ø—Ä–æ–ø—É—â–µ–Ω - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —á—Ç–µ–Ω–∏–∏");

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î (–±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è): {} ({})", user.getName(), user.getId());
        return user;
    }

    /**
     * WRITE-AROUND PATTERN - –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –≤ –ë–î, –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è
     */
    public User updateUser(Long id, String name, String email) {
        log.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —á–µ—Ä–µ–∑ Write-Around", id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User existingUser = database.get(id);
        if (existingUser == null) {
            log.warn("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", id);
            return null;
        }

        // WRITE-AROUND: –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≤ –ë–î
        log.info("üíæ WRITE-AROUND: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à –ø—Ä–æ–ø—É—â–µ–Ω)");
        existingUser.setName(name);
        existingUser.setEmail(email);
        database.put(id, existingUser);

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è) - –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏");
        cache.remove(id);

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î, –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {} ({})", existingUser.getName(), existingUser.getId());
        return existingUser;
    }

    public void deleteUser(Long id) {
        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —á–µ—Ä–µ–∑ Write-Around", id);

        // WRITE-AROUND: —É–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –∏–∑ –ë–î
        log.info("üíæ WRITE-AROUND: –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à –ø—Ä–æ–ø—É—â–µ–Ω)");
        database.remove(id);

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è)");
        cache.remove(id);

        log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {}", id);
    }

    public void clearCache() {
        log.info("üßπ –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à! –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {}", cache.size());
        cache.clear();
        log.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω");
    }

    public Map<Long, User> getCache() {
        log.info("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç—É. –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {}", cache.size());
        return new HashMap<>(cache);
    }
}