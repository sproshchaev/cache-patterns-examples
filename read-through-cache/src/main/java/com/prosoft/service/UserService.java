package com.prosoft.service;

import com.prosoft.model.User;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class UserService {

    // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    private final Map<Long, User> database = new HashMap<>();

    // Read-Through Cache - –∫—ç—à —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    private final Map<Long, User> cache = new ConcurrentHashMap<>();

    @PostConstruct
    public void init() {
        // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        database.put(1L, new User(1L, "Alice", "alice@example.com"));
        database.put(2L, new User(2L, "Bob", "bob@example.com"));
        database.put(3L, new User(3L, "Charlie", "charlie@example.com"));

        log.info("üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", database.size());
    }

    /**
     * READ-THROUGH PATTERN - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫—ç—à–µ–º
     * –ö—ç—à —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
     */
    public User getUserById(Long id) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {} —á–µ—Ä–µ–∑ Read-Through –∫—ç—à", id);

        // READ-THROUGH: computeIfAbsent –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        User user = cache.computeIfAbsent(id, this::loadUserFromDatabase);

        if (user != null) {
            log.info("üéØ CACHE HIT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ", id);
        } else {
            log.warn("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", id);
        }

        return user;
    }

    // –ú–µ—Ç–æ–¥-–∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è Read-Through –∫—ç—à–∞
    private User loadUserFromDatabase(Long id) {
        log.info("üìñ READ-THROUGH: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", id);
        return database.get(id); // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ in-memory Map
    }

    public User updateUser(Long id, String name, String email) {
        log.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (–∏–º–∏—Ç–∞—Ü–∏—è)
        User existingUser = database.get(id);
        if (existingUser != null) {
            existingUser.setName(name);
            existingUser.setEmail(email);
            database.put(id, existingUser);

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
            log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏–∑ –∫—ç—à–∞ (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è)", id);
            cache.remove(id);
        }

        return existingUser;
    }

    public void clearCache() {
        log.info("üßπ –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à! –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {}", cache.size());
        cache.clear();
        log.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω");
    }

    public Map<Long, User> getCache() {
        log.info("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç—É. –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {}", cache.size());
        return new HashMap<>(cache);
    }
}